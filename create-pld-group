#!/usr/bin/env python3

""" create automaticaly pld-groups """
import typer
from dotenv import load_dotenv
import logging
import os
import sys
from intranet.client import IntranetClient
from intranet.fake_client import FakeIntranetClient
import csv
import json

stdoutLogger = logging.getLogger()
stdoutLogger.setLevel(logging.DEBUG)
stdoutHandler = logging.StreamHandler(sys.stdout)
stdoutLogger.addHandler(stdoutHandler)

load_dotenv()

App = typer.Typer()


def get_score(yl):
    if yl["average"] is not None:
        return yl["average"]
    return 0


def chunks(l, n):
    n = max(1, n)
    return (l[i:i + n] for i in range(0, len(l), n))


@App.command()
def basecommand(project_id: int, cohort: str, test: bool = typer.Argument(False)):
    """
    Get the project id and the cohort id 
    to collect data and to create pld-groups 
    """
    print(f'cohort: {cohort}, projectId: {project_id}')
    if not test:
        client = IntranetClient(os.environ.get('HBTN_KEY'), os.environ.get('HBTN_SECRET'), os.environ.get('HBTN_URL'))
    else:
        client = FakeIntranetClient()

    squads = {}
    groups = []

    with open("{}.csv".format(cohort)) as csv_file:
        reader = csv.DictReader(csv_file)
        for yl in reader:
            intranet_yl = client.get_student(yl['HBTN_ID'])

            product = intranet_yl["product"]

            yl['average'] = product['average']

            if not yl["Squad"] in squads:
                squads[yl["Squad"]] = []

            squads[yl["Squad"]].append(yl)

    for squad_name, squad_list in squads.items():
        squad_list.sort(key=get_score)
        length = len(squad_list)
        squad_groups = {}
        amount = 1
        while length / amount > 9:
            amount = amount + 1

        count = 0
        for yl in squad_list:
            group_name = str(count % amount)
            if not group_name in squad_groups:
                squad_groups[group_name] = []

            append_yl = {
                "id": yl["HBTN_ID"],
                "full_name": yl["Full Name"],
            }

            if test:
                append_yl['average'] = yl['average']

            squad_groups[group_name].append(append_yl)
            count = count + 1

        for index, group in squad_groups.items():
            groups.append(group)

    with open(f'cohort-{cohort}-project-{project_id}.json', 'w') as f:
        json.dump(groups, f)


if __name__ == "__main__":
    App()
